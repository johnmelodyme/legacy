' Stampy BS2 Brain software
' January 10, 1999
'
' 2-15-99 figured out how to do turning while walking
'         achieved first successfull wall-hug!!!
' 2-20-99 more walking tests -- did a rotation
' 2-21-99 version B
' 2-27-99 version C -- switching subroutines for walking
' 3-07-99 visor control (bogus)
' 3-20-99 version E -- candle tests with new sensor!!!

true	con	1
false	con	0



' stamp comm stuff

ACK	con	65	' received when BS1 finishes a command
N2400	con	16780	' BS2 equivalent of BS1 comm mode
LINK	con	15	' serial communication pin 

STEPL	con	0	' step and balance on left foot
STEPR	con	1	' step and balance on right foot
TORSO	con	2	' move torso to absolute position
FANON	con	3	' turn fan on for a while
RSTRT	con	4	' tell BS1 to enter beep-input state
JOINT	con	5	' move joint N to position M
XSIGN	con	6	' toggle green light


' GP2D02 IR proximity detector stuff

IRVIN	con	10	' control line
IRVOUTR	con	11	' right sensor output pin
IRVOUTL	con	12	' left sensor output pin
irdistl	var	byte	' left sensor value
irdistr	var	byte	' right sensor value

irrpre0	var	byte	' previous sensor values
irlpre0	var	byte



' general purpose counting variables

ii	var	word
i	var	byte
k	var	byte
m	var	byte
n	var	byte
j	var	nib
x	var	nib



' walking stuff

rankpos		var	byte	' ankle positions
lankpos		var	byte
stepdr		var	byte	' turning variables
stepdl		var	byte

hugside		var	bit	' indicates left or right wall hug 
laststep	var	bit	' indicates which foot balanced last

right		con	0	' (hug, last balance foot, etc.)
left		con	1

body_cr	con	140		' near center right
body_cl	con	80		' near center left
body_c	con	110		' body center and extremes
body_r	con	220	
body_l	con	0

aheadr	con	82	' normal walking constants
aheadl	con	82

' trial and error step timing constants

bodytm0	con	350		' rotation delay
bodytm4	con	380		' walking body swing delay
bodytm5	con	20		' walking ankle delay

rocon	con	22		' rotation ankle param

' CANDLE inputs

FLAME	var	ins.bit13	' UV flame detector
CANDLE	var	ins.bit2	' candle spotter
FUZE	var	ins.bit14	' candle fuze



'----------------------------------------------------------------


'goto coo
'goto COMMENCE
'serin LINK,N2400,[WAIT(ACK)]
'goto irtest


coo:
	serin LINK,N2400,[WAIT(ACK)]

	gosub sr_attention_r
	gosub sr_extinguish

	serout LINK,N2400,[RSTRT,0,0]

goto coo

end


irtest:
	gosub sr_ir_lprox
	gosub sr_ir_rprox
'	debug dec stepdr," ", dec stepdl, " ", dec irdistr," ", dec irdistl, cr
'	debug dec irdistl, " ", dec irlpre0, cr
'	debug dec irdistl, " ", dec irdistr, cr
	pause 500
	goto irtest
end


COMMENCE:

stepdr=0
stepdl=0
hugside=right
'hugside=left


foo:
	serin LINK,N2400,[WAIT(ACK)]


	for i=1 to 18
		gosub sr_walk_hug
	next
	
		' send everything back to starting position

	gosub sr_attention_r
	serout LINK,N2400,[RSTRT,0,0]
	goto foo
end







'---------------------------------------- SUBROUTINES

sr_green_tog:
	serout LINK,N2400,[XSIGN,0,0]
	serin LINK,N2400,[WAIT(ACK)]
	return	

'
' get readings from GP2D02 sensors
'
sr_ir_lprox:
'	gosub sr_green_tog
	irlpre0=irdistl
	low IRVIN
	pause 70
	shiftin IRVOUTL,IRVIN,MSBPOST,[irdistl\8]
	high IRVIN
	pause 2
'	gosub sr_green_tog
	return

sr_ir_rprox:
	gosub sr_green_tog
	irrpre0=irdistr
	low IRVIN
	pause 70
	shiftin IRVOUTR,IRVIN,MSBPOST,[irdistr\8]
	high IRVIN
	pause 2
	gosub sr_green_tog
	return



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SWITCHING SUBROUTINES
' (switch subroutines redirect flow to appropriate side primitive)

sr_switch_step_anks_hug:
	branch hugside,[sr_step_rbal_anks,sr_step_lbal_anks]
sr_switch_step_anks_nohug:
	branch hugside,[sr_step_lbal_anks,sr_step_rbal_anks]

sr_switch_step_body_hug:
	branch hugside,[sr_body_r,sr_body_l]
sr_switch_step_body_nohug:
	branch hugside,[sr_body_l,sr_body_r]

sr_switch_hug_wall:
	branch hugside,[sr_hug_rwall,sr_hug_lwall]

sr_switch_avoid_crash:
	branch hugside,[sr_avoid_crash_r,sr_avoid_crash_l]



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SUBROUTINES FOR STEP PRIMITIVES

sr_step_lbal_anks:
	lankpos=  (aheadl+stepdl)
	rankpos=  (aheadr+stepdr)
sr_step_lbal:
	serout LINK,N2400,[STEPL,rankpos,lankpos]
	serin LINK,N2400,[WAIT(ACK)]
	return

sr_step_rbal_anks:
	lankpos= -(aheadl+stepdl)
	rankpos= -(aheadr+stepdr)
sr_step_rbal:
	serout LINK,N2400,[STEPR,rankpos,lankpos]
	serin LINK,N2400,[WAIT(ACK)]
	return

sr_body_l:
	serout LINK,N2400,[TORSO,body_l,0]
	serin LINK,N2400,[WAIT(ACK)]
	return

sr_body_r:
	serout LINK,N2400,[TORSO,body_r,0]
	serin LINK,N2400,[WAIT(ACK)]
	return

sr_body_c:
	serout LINK,N2400,[TORSO,body_c,0]
	serin LINK,N2400,[WAIT(ACK)]
	return

sr_body_k:
	serout LINK,N2400,[TORSO,k,0]
	serin LINK,N2400,[WAIT(ACK)]
	return




sr_attention_r:
	gosub sr_body_r
	pause bodytm0
	lankpos=  0
	rankpos=  0
	gosub sr_step_rbal
	gosub sr_body_c
	pause bodytm0
	return

sr_attention_l:
	gosub sr_body_l
	pause bodytm0
	lankpos=  0
	rankpos=  0
	gosub sr_step_lbal
	gosub sr_body_c
	pause bodytm0
	return

sr_rotate_l:
	for j=0 to 2
		gosub sr_body_r
		pause bodytm0
		lankpos= -rocon
		rankpos=  rocon
		gosub sr_step_rbal
		pause bodytm0

		gosub sr_body_l
		pause bodytm0
		lankpos=  rocon
		rankpos= -rocon
		gosub sr_step_lbal
		pause bodytm0
	next
	return

sr_rotate_r:
	for j=0 to 2
		gosub sr_body_l
		pause bodytm0
		lankpos= -rocon
		rankpos=  rocon
		gosub sr_step_lbal
		pause bodytm0

		gosub sr_body_r
		pause bodytm0
		lankpos=  rocon
		rankpos= -rocon
		gosub sr_step_rbal
		pause bodytm0
	next
	return



'''''''''''''''''''''''''''''''''''''''''''''''''''''
' WALL-HUGGING and COLLISION DETECTION
' (distance values come from trial and error)

sr_hug_rwall:
	gosub sr_ir_rprox
	lookdown irdistr, <= [112,130,255] ,x
	lookup x,[10,0,0],stepdr
	lookup x,[0,0,10],stepdl
	return

sr_hug_lwall:
	gosub sr_ir_lprox
	lookdown irdistl, <= [128,148,255] ,x
	lookup x,[0,0,10],stepdr
	lookup x,[10,0,0],stepdl
	return

sr_avoid_crash_r:
	gosub sr_ir_lprox
	if irdistl>118 then sr_avoid_crash_r_now
	return
	sr_avoid_crash_r_now:
		gosub sr_rotate_l
	return

sr_avoid_crash_l:
	gosub sr_ir_rprox
	if irdistr>102 then sr_avoid_crash_l_now
	return
	sr_avoid_crash_l_now:
		gosub sr_rotate_r
	return


'''''''''''''''''''''''''''''''''''''''''''''''''
' COMPLICATED STUFF

sr_walk_hug

		' swing body to check wall-hugging side first

	gosub sr_switch_step_body_hug
	pause bodytm4
	gosub sr_switch_hug_wall	' calculate step vals for hug
	gosub sr_switch_step_anks_hug
	pause bodytm5

		' swing body to non-hug side

	gosub sr_switch_step_body_nohug	
	pause bodytm4
	gosub sr_switch_avoid_crash	' check for collision ahead
	gosub sr_switch_step_anks_nohug
	pause bodytm5

	return


sr_extinguish:

	' do an lbal step so scanner is on left side

	sr_extinguish_again:

		gosub sr_body_l
		pause 700
		gosub sr_step_lbal_anks
		pause 500

	' snap back to near center then
	' do slow scan till candle found

	k=body_cl
	gosub sr_body_k
	pause 500

	for k=body_cl to body_r step 2
		if FUZE=1 then sr_extinguish_blow
		if CANDLE=1 then sr_extinguish_found
		gosub sr_body_k
	next

	' default is go straight (x==2) if candle not found
	' a failed scan occurs when k>=body_r

	x=2
	if k>=body_r then sr_extinguish_steer

	sr_extinguish_found:
		gosub sr_body_r
		ii=body_r-(k max body_r)
		ii=ii*5			' pause depends when candle found
		pause ii
		lookdown k, <= [160,167,173,180,255] ,x
	sr_extinguish_steer:
		lookup x,[-10, -5, 0,  5, 10],stepdr
		lookup x,[ 10,  5, 0, -5,-10],stepdl
		gosub sr_step_rbal_anks
		pause 500

	goto sr_extinguish_again

sr_extinguish_blow:

	i=25

	sr_extinguish_keep_blowing:

		i=i+5

		' fan on (3 sec, 3.5 sec, 4 sec etc.)

		gosub sr_green_tog
		serout LINK,N2400,[FANON,i,0]
		serin LINK,N2400,[WAIT(ACK)]
		gosub sr_green_tog

		' pause 1 sec to be sure UV has settled
		' take 200 samples in 2 sec
		' to verify that candle is extinguished!!!

		pause 1000
		for n=1 to 200
			if FLAME=0 then sr_extinguish_keep_blowing
			pause 10
			gosub sr_green_tog
		next

	' if here then flame is extinguished -- hooray!!!


blink_done:

	gosub sr_green_tog	
	pause 250
	goto blink_done

ABORT:
	end
