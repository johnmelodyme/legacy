#include <aCore.tea>
#include <aPrint.tea>
#include <aA2D.tea>
#include <aDig.tea>
#include <aDump.tea>
#include <aServo.tea>

#define SRV_MO_L        0
#define SRV_MO_R        1

#define MAX_V		20

#define SIGN_BIT        0x8000

#define ENA_L   (unsigned char)(SRV_ENA)
#define ENA_R   (unsigned char)(SRV_ENA | SRV_INV)



// global absolute addressable buffer
// for holding serial data from ColorPAL
//
// the buffer starts at absolute stack address 0
//
unsigned char b00=0;
unsigned char b01=0;
unsigned char b02=0;
unsigned char b03=0;
unsigned char b04=0;
unsigned char b05=0;
unsigned char b06=0;
unsigned char b07=0;
unsigned char b08=0;
unsigned char b09=0;
unsigned char b10=0;
unsigned char b11=0;
unsigned char b12=0;



unsigned int hex(unsigned int x)
{
   // default is convert '0' - '9'
   unsigned int r = x - 48;

   // but convert 'A' - 'F' based on ASCII bit test
   if ((x & 0x70) == 4)
   {
      r = x - 55;
   }

   return r;
}



// convert three ASCII hex digits to one decimal integer
unsigned int conv3(unsigned int a, unsigned int b, unsigned int c)
{
   return ((hex(a) * 256) + (hex(b) * 16) + hex(c));
}



int _GTE(int a, int b)
{
   return ((b - a) & SIGN_BIT);
}

int _LT(int a, int b)
{
   return ((a - b) & SIGN_BIT);
}



// apply velocities to left and right servo motors
void moGo(int vL, int vR)
{
   aServo_SetAbsolute(SRV_MO_L, (unsigned char)(vL + 128));
   aServo_SetAbsolute(SRV_MO_R, (unsigned char)(vR + 128));
}



// enable servo motor outputs
void moOn()
{
   aServo_SetConfig(SRV_MO_L, ENA_L);
   aServo_SetConfig(SRV_MO_R, ENA_R);
}



// disable servo motor outputs (prevents chatter and creep when robot is still)
void moOff()
{
   aServo_SetConfig(SRV_MO_L, 0);
   aServo_SetConfig(SRV_MO_R, 0);
}



// use an error term to turn the robot
// larger error makes harder turn
// sign of error determines direction of turn
void steer(int err, int maxv)
{
   int vr = maxv;
   int vl = maxv;
   int ferr = err;
	
   // take abs of err and limit it to maxv
   if (err & SIGN_BIT) ferr = -err;
   if (_GTE(ferr, maxv)) ferr = maxv;
	
   // robot is steered by slowing one wheel
   // check sign of err to see which wheel gets slowed
   if ((err & SIGN_BIT) == 0)
   {
      vr = maxv - ferr;
   }
   else
   {
      vl = maxv - ferr;
   }
	
   // apply new speeds
   moGo(vl, vr);
}



// read the ColorPAL sensor
// sends command to get one RGB sample and stores hex response in global buffer
void sample()
{
  asm
  {
    // send command to get RGB sample
    pushls 0x3D6D // push bytes "=m!" 3
    pushls 0x2103
    popbm aPortSerialNTX

    // wait for 3-byte echo and 9-byte raw input reply
    // RRRGGGBBB (hex digits)

    pushlb 12
    popbm aPortSerialNRX

    // discard size of read (1 byte)
    popb

    // put 3-byte echo and 9-byte response into global buffer
    popssa 10
    popssa 8
    popssa 6
    popssa 4
    popssa 2
    popssa 0
  }
}



void follow(int kr, int kg, int avg, int dir)
{
   // this routine attempts to steer the robot
   // so it keeps red and green components balanced
   // this makes the robot follow a red-green edge

   // error between red and green gets bigger as intensity gets bigger
   // so first scale up red-green then normalize to average red-green intensity
   // scaling up first prevents integer division from zeroing the result
   int err = ((kr - kg) * 10) / avg;

   // finally apply proportional gain and direction factor
   // dir is 1 for red-on-left
   // dir is -1 for red-on-right
   err = (err * 4) * dir;
   steer(err, MAX_V);
}



void main()
{
   int kr = 0;
   int kg = 0;
   int kb = 0;
   int avgRG = 0;
   int blueCt = 0;
   int dir = 1;

   aCore_Sleep(10000);
   aDig_Config(4, ADIG_OUTPUT);

   moOn();  // FIXME

   while (1)
   {
      sample();

      // slurp individual red-green-blue values out of buffer
      kr = conv3(b03, b04, b05);
      kg = conv3(b06, b07, b08);
      kb = conv3(b09, b10, b11) * 2;

      // get average red-green intensity
      avgRG = (kr + kg); // + kb;

      // occasionally the module may return 0s
      // so this will prevent a divide-by-zero error later...
      if (avgRG == 0)
      {
         avgRG = 1;
      }

      // halt if blue is 50% more than both red and green
      // multiply red-green by 3 since blue has been multiplied by 2 above
      if (_GTE(kb, 3 * kr) && _GTE(kb, 3 * kg))
      {
         steer(0, MAX_V);
         blueCt++;
         if (blueCt == 3)
         {
            moOff();
            aCore_Sleep(30000);
            moOn();

            // reset
            blueCt = 0;
         }
      }
      else
      {
         // no blue so just follow green and red
         follow(kr, kg, avgRG, dir);
         blueCt = 0;
      }


/*

aPrint_IntDec(kr);
aPrint_Char(',');
aPrint_IntDec(kg);
aPrint_Char(',');
aPrint_IntDec(avgRG);
aPrint_Char(',');
aPrint_IntDec(((kr - kg) * 10) / avgRG);
aPrint_Char(',');
aPrint_IntDec(kb);
aPrint_Char(',');
aPrint_IntDec(blueCt);
aPrint_String(".\n");
      aCore_Sleep(2000);
*/

   }
}
