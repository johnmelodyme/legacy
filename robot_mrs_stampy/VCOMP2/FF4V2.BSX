' FIRE-FIGHTER PROGRAM 4
' FOOT STEP ROUTINES
'
' 3-05-2000 upgrade to BS2-SX
' 3-06-2000 rotate subroutines
' 3-07-2000 more general purpose hug
' 3-11-2000 continuing to tweak basic step timing
' 3-17-2000 tail and dynamic speed control in turns
' 4-01-2000 updated backup and rotate
' 4-03-2000 tweaked sensitivity of line detector
' 4-06-2000 almost removed backwards walk
' 4-07-2000 all software integrated


wlthr	con	80
whfor	con	139

' variables

i	var	byte
k	var	byte
x	var	byte
pos1	var	byte
pos2	var	byte
pos3	var	byte
posh	var	byte
irw	var	byte	' prox wall checker
irf	var	byte	' prox forward checker

bbak	var	bit
b90x	var	bit	' inhibit bit for 90 degree wall-hug turns
wlok	var	bit	' white line detected
ww	var	word	' white line detection output
wmax	var	word	' dynamic white-line max value
wmin	var	word	' dynamic white-line min value


' beep stuff

beep	con	12
beepgnd	con	13



' servo control parameters

sync	con	255
ssc2	con	7	' pin 7 (use another pin to disable servos)
svo	con	0
n96n	con	16624	' BS2-SX



' body servo IDs

svhead	con	3
svlank	con	0
svrank	con	7
svlhip	con	1
svrhip	con	6



' body home positions

hmhead	con	132	'
hmlank	con	121	'
hmrank	con	139	'
hmlhip	con	127	'
hmrhip	con	122	'
hmhipd	con	5	' left hip home is 5 more than right hip home



' walking parameters

tshift	con	120'60	' time for weight shift before hip lift
thipup	con	50	' time for hip lift before ankle push
tankmv	con	100	' time for ankle push before weight shift back
thipdn	con	0	' time for shift before hips drop
tfinal	con	450'430'400	' time to complete weight shift back

jwhead	con	100'75	' balancing offset for head
jwhips	con	18	' offset for raising hips
jwanks	con	30	' offset for normal step

jwankb	con	30	' offset for backward step
jwhipb	con	18	' offset for backward raising hips

crvmax	con	8

nspd	var	nib	' speed selector
btshft	var	byte
wtdone	var	word
bhoffs	var	byte

brankd	var	byte	' right ankle turning offset
blankd	var	byte	' left ankle turning offset
brankx	var	byte	' right ankle step offset
blankx	var	byte	' left ankle step offset



'-----------------------------------------------

low beepgnd

enterprogram4:

	' determine what kind of walk to perform
	
	get 0,x			' type
	get 1,k			' step limit
	get 2,blankd
	get 3,brankd

	blankx=jwanks		' set default walk params
	brankx=jwanks
	nspd=0
	gosub sr_setwalk

	branch x,[exitprogram4,ex_left,ex_right,ex_walk,ex_hug,ex_walkb]

exitprogram4:

	for ww=400 to 600 step 50
		freqout beep,200,ww
	next
	' REMOVE THIS DELAY FOR CONTEST
	for ww=400 to 550 step 50
		freqout beep,200,ww
		pause 1000
	next

	get 10,x	' increment waypoint
	x=x+1
	put 10,x
	get 62,x	' run calling program
	run x

'-----------------------------------------------

ex_hug:
	'
	' wall hug till white line found
	' inhibit white-line detect for first 8 steps
	' turn 90 degrees when wall is straight ahead
	'
	b90x=0
	for i=1 to k

		ex_hug_loop_start:

		gosub sr_prox_w
		gosub sr_hugcalc
		gosub sr_setwalk
		gosub sr_lbstep
		if wlok=1 and i>3 then ex_hug_done
		gosub sr_prox_f
		if irf<whfor then ex_hug_1
'		if b90x=1 then ex_hug_1
			b90x=1
			gosub sr_attenb
			ww.lowbyte=blankd
			blankd=45
			gosub sr_rotrbstep
			gosub sr_rotlbstep
			blankd=ww.lowbyte
			brankx=jwanks
			blankx=jwanks
			goto ex_hug_loop_start
		ex_hug_1:

		gosub sr_prox_w
		gosub sr_hugcalc
		gosub sr_setwalk
		gosub sr_rbstep
		if wlok=1 and i>3 then ex_hug_done
		gosub sr_prox_f
		if irf<whfor then ex_hug_2
'		if b90x=1 then ex_hug_2
			b90x=1
			gosub sr_attenb
			ww.lowbyte=blankd
			blankd=45
			gosub sr_rotrbstep
			gosub sr_rotlbstep
			blankd=ww.lowbyte
			brankx=jwanks
			blankx=jwanks
			goto ex_hug_loop_start
		ex_hug_2:
	next
	ex_hug_done:
	gosub sr_attenb

	' look for the candle
	for i=1 to 100
		if in3=0 then ex_hug_candle
		pause 10 
	next
	goto exitprogram4

	ex_hug_candle:
		run 5


ex_walk:
	'
	' take fixed number of straight or curving steps
	'
	gosub sr_square
	nspd=1
	gosub sr_setwalk
	for i=1 to k
		gosub sr_prox_f
		if irf>139 then ex_walk_stop
		gosub sr_lbstep
		pause 100
		gosub sr_prox_f
		if irf>139 then ex_walk_stop
		gosub sr_rbstep
		pause 100
	next
	ex_walk_stop:
	gosub sr_attenb
	goto exitprogram4

ex_walkb:
	'
	' take fixed number of straight backward steps
	'
	for i=1 to k
		gosub sr_bwlbstep
		gosub sr_bwrbstep
	next
	gosub sr_atten
	goto exitprogram4


ex_left:
	'
	' take fixed number of rotate left steps
	'
	get 2,blankd
	brankd=0
	for i=1 to k
		gosub sr_lrot
	next
	goto exitprogram4

ex_right:
	'
	' take fixed number of rotate right steps
	'
	get 2,brankd
	blankd=0
	for i=1 to k
		gosub sr_rrot
	next
	goto exitprogram4




'-----------------------------------------------

sr_lbstep:
	'
	' LEFT-FOOT BALANCE STEP (WITH RIGHT TURN)
	' SAMPLE WHITE-LINE OUTPUT DURING ANKLE MOVEMENT
	'
	put 11,0
	serout ssc2,n96n,[sync,svhead,hmhead+bhoffs]
	pause btshft
	pos1=hmlhip-jwhips
	serout ssc2,n96n,[sync,svlhip,pos1,sync,svrhip,pos1-hmhipd]
	pause thipup
	pos1=hmlank+blankx
	pos2=hmrank+brankx+brankd
	serout ssc2,n96n,[sync,svlank,pos1,sync,svrank,pos2]
	gosub sr_sample
'	pause tankmv
	posh=hmhead-brankx
	serout ssc2,n96n,[sync,svhead,posh]
	pause thipdn
	serout ssc2,n96n,[sync,svlhip,hmlhip]
	serout ssc2,n96n,[sync,svrhip,hmrhip]
	pause wtdone
return



sr_rbstep:
	'
	' RIGHT-FOOT BALANCE STEP (WITH LEFT TURN)
	'
	put 11,1
	serout ssc2,n96n,[sync,svhead,hmhead-bhoffs]
	pause btshft
	pos1=hmlhip+jwhips
	serout ssc2,n96n,[sync,svlhip,pos1,sync,svrhip,pos1-hmhipd]
	pause thipup
	pos1=hmlank-blankx-blankd
	pos2=hmrank-brankx
	serout ssc2,n96n,[sync,svlank,pos1,sync,svrank,pos2]
	gosub sr_sample
'	pause tankmv
	posh=hmhead+blankx
	serout ssc2,n96n,[sync,svhead,posh]
	pause thipdn
	serout ssc2,n96n,[sync,svlhip,hmlhip]
	serout ssc2,n96n,[sync,svrhip,hmrhip]
	pause wtdone
return


sr_lrot:
	'
	' RIGHT-FOOT BALANCE LEFT ROTATE
	'
	gosub sr_rotrbstep
	gosub sr_rotlbstep
return

sr_rrot:
	'
	' LEFT-FOOT BALANCE RIGHT ROTATE
	'
	gosub sr_rotlbstep
	gosub sr_rotrbstep
return

sr_rotlbstep:
	pos3=brankd
	serout ssc2,n96n,[sync,svhead,hmhead+110]
	pause 350
	pos1=hmlhip-jwhips
	serout ssc2,n96n,[sync,svlhip,pos1,sync,svrhip,pos1-hmhipd]
	pause 100
	pos1=hmlank-brankd
	pos2=hmrank+brankd
	serout ssc2,n96n,[sync,svlank,pos1,sync,svrank,pos2]
	pause 100
	pos1=hmlhip
	serout ssc2,n96n,[sync,svlhip,pos1]
	serout ssc2,n96n,[sync,svrhip,pos1-hmhipd]
	pause 300
	serout ssc2,n96n,[sync,svhead,hmhead-pos3]
	pause 700
return

sr_rotrbstep:
	pos3=blankd
	serout ssc2,n96n,[sync,svhead,hmhead-110]
	pause 350
	pos1=hmlhip+jwhips
	serout ssc2,n96n,[sync,svlhip,pos1,sync,svrhip,pos1-hmhipd]
	pause 100
	pos1=hmlank-blankd
	pos2=hmrank+blankd
	serout ssc2,n96n,[sync,svlank,pos1,sync,svrank,pos2]
	pause 100
	pos1=hmlhip
	serout ssc2,n96n,[sync,svlhip,pos1]
	serout ssc2,n96n,[sync,svrhip,pos1-hmhipd]
	pause 300
	serout ssc2,n96n,[sync,svhead,hmhead+pos3]
	pause 700
return



sr_bwlbstep:
	'
	' LEFT-FOOT BACKWARD BALANCE STEP (WITH RIGHT TURN)
	'
	put 11,0
	serout ssc2,n96n,[sync,svhead,hmhead+110]
	pause 350
	pos1=hmlhip-jwhipb
	serout ssc2,n96n,[sync,svlhip,pos1,sync,svrhip,pos1-hmhipd]
	pause 100
	pos1=hmlank-blankx
	pos2=hmrank-brankx
	serout ssc2,n96n,[sync,svlank,pos1,sync,svrank,pos2]
	pause 100
	serout ssc2,n96n,[sync,svlhip,hmlhip]
	serout ssc2,n96n,[sync,svrhip,hmrhip]
	pause 300
	posh=hmhead+brankx
	serout ssc2,n96n,[sync,svhead,posh]
	pause 700
return

sr_bwrbstep:
	'
	' RIGHT-FOOT BACKWARD BALANCE STEP (WITH LEFT TURN)
	'
	put 11,1
	serout ssc2,n96n,[sync,svhead,hmhead-110]
	pause 350
	pos1=hmlhip+jwhipb
	serout ssc2,n96n,[sync,svlhip,pos1,sync,svrhip,pos1-hmhipd]
	pause 100
	pos1=hmlank+blankx
	pos2=hmrank+brankx
	serout ssc2,n96n,[sync,svlank,pos1,sync,svrank,pos2]
	pause 100
	serout ssc2,n96n,[sync,svlhip,hmlhip]
	serout ssc2,n96n,[sync,svrhip,hmrhip]
	pause 300
	posh=hmhead-blankx
	serout ssc2,n96n,[sync,svhead,posh]
	pause 700
return




sr_attenb:
	'
	' square up after walking with one backward step
	'
	brankx=0
	blankx=0
	brankd=0
	blankd=0
	get 11,x
	if x=0 then sr_attenb_r
		gosub sr_rbstep
		return
	sr_attenb_r:
		gosub sr_lbstep
		return


sr_atten:
	'
	' square up after walking with one forward step
	'
	brankx=0
	blankx=0
	brankd=0
	blankd=0
	get 11,x
	if x=0 then sr_atten_r
		gosub sr_lbstep
		return
	sr_atten_r:
		gosub sr_rbstep
		return


sr_square:
	'
	' find angle that yields minimum
	' then rotate to compensate
	'
return
	serout ssc2,n96n,[sync,svhead,hmhead-40]
	pause 200
	pos1=0
	pos2=0
	for i=1 to 80
		gosub sr_prox_f
		if irf<pos1 then sr_square_x
			pos1=irf
			pos2=i
		sr_square_x:
		serout ssc2,n96n,[sync,svhead,hmhead-40+i]
		pause 20
	next
	if pos2<40 then sr_square_y
		pos3=pos2-40
		if pos3<5 then sr_square_done
		ww.lowbyte=blankd
		blankd=pos3
		gosub sr_rotrbstep
		gosub sr_rotlbstep
		blankd=ww.lowbyte
		goto sr_square_done
	sr_square_y:
		pos3=40-pos2
		if pos3<5 then sr_square_done
		ww.lowbyte=brankd
		brankd=pos3
		gosub sr_rotlbstep
		gosub sr_rotrbstep
		brankd=ww.lowbyte
	sr_square_done:
	return
	


sr_prox_w:
	low 6
	sr_prox_w_wait:
		if in8=0 then sr_prox_w_wait
	shiftin 8,6,MSBPOST,[irw\8]
	high 6
return

sr_prox_f:
	low 10
	sr_prox_f_wait:
		if in9=0 then sr_prox_f_wait
	shiftin 9,10,MSBPOST,[irf\8]
	high 10
return


sr_sample:
	'
	' ankle motion will sweep tail back and forth
	' so sample the white-line detector
	'
	wlok=0
	wmax=0
	wmin=65535
	for x=1 to 50
		pulsin 5,1,ww
		wmin=ww max wmin
		wmax=ww min wmax
		pause 2
	next
	ww=wmax-wmin
'	freqout beep,200,ww*10+200
	if ww<100 then sr_sample_noline
		wlok=1
	sr_sample_noline:
return



sr_hugcalc:

lookdown irw,>=[74,0],nspd

'lookdown irw,<=[ 75, 83, 96,105,110,114,121,127,136,142,155,183,255],x
lookdown irw,<=[ 72, 81, 90, 99,102,105,110,114,121,127,136,155,255],x
'lookdown irw,<=[ 68, 77, 86, 93, 96, 99,102,105,110,114,121,136,255],x
'lookdown irw,<=[ 64, 73, 82, 88, 90, 93, 96, 99,102,105,110,121,255],x
lookup x,      [  0,  0,  0,  0,  0,  0,  0,  0,  5, 10, 15, 20, 20],blankd
lookup x,      [ 56, 34, 25, 20, 15, 10,  5,  0,  0,  0,  0,  0,  0],brankd

return


sr_setwalk:
	lookup nspd,[70,130],btshft
	lookup nspd,[520,650],wtdone
'	lookup nspd,[550,650],wtdone
	lookup nspd,[80,105],bhoffs


''	lookup nspd,[70,130],btshft
''	lookup nspd,[450,550],wtdone
''	lookup nspd,[80,105],bhoffs

'	lookup nspd,[60,120],btshft
'	lookup nspd,[350,450],wtdone
'	lookup nspd,[75,100],bhoffs
	return
